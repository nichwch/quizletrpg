{"ast":null,"code":"import _classCallCheck from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport EventControls from \"./EventControls.js\";\nimport Clock from \"./clock.js\";\n\nvar events = require(\"./events.js\").default;\n\nvar monster1 = require(\"./images/monster1.png\");\n\nvar background = require(\"./images/background.png\");\n\nvar startEvent = {\n  Title: \"You wake up in a dark room.\",\n  Description: \"The dim candles on the walls illuminate 3 doors in front of you. Which do you take?\",\n  Options: [{\n    Title: \"Door 1\",\n    Reference: \"random\",\n    Event: true\n  }, {\n    Title: \"Door 2\",\n    Reference: \"random\",\n    Event: true\n  }, {\n    Title: \"Door 3\",\n    Reference: \"random\",\n    Event: true\n  }]\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      appstate: \"event\",\n      playerHP: 50,\n      monster: {\n        taunts: []\n      },\n      taunt: \"\",\n      URL: 'https://quizlet.com/296829048/repaso-del-subjuntivo-2-crs-palabras-indefinidas-csi-flash-cards/',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\", \"s\", \"s\", \"s\"]\n      },\n      //timer\n      remainingTime: 6.0,\n      //event\n      event: startEvent\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateQuestion = _this.generateQuestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shuffleArray = _this.shuffleArray.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateMonster = _this.generateMonster.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickOne = _this.clickOne.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickTwo = _this.clickTwo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickThree = _this.clickThree.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickFour = _this.clickFour.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damageEnemy = _this.damageEnemy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damagePlayer = _this.damagePlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadEvent = _this.loadEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }, {\n    key: \"generateMonster\",\n    value: function generateMonster() {\n      var _this2 = this;\n\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this2.setState({\n          monster: data.data,\n          monsterHP: data.data.hp,\n          monsterAT: data.data.at\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"generateQuestion\",\n    value: function generateQuestion() {\n      var index = Math.floor(Math.random() * (this.state.quizletSet.length - 1));\n      var answer = this.state.quizletSet[index].definition;\n      var wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var answers = [answer, wronganswer1, wronganswer2, wronganswer3];\n      this.shuffleArray(answers);\n      this.setState({\n        questionObject: {\n          correctIndex: index,\n          buttons: answers\n        }\n      });\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.remainingTime > 0.1) {\n        this.setState({\n          remainingTime: this.state.remainingTime - 0.1\n        });\n      } else {\n        this.damagePlayer();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      //your write request axios.write(blah blah blah)\n      //have it log to console, then check dev tools to see if it worked\n      //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n      this.generateQuestion();\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this3.setState({\n          monster: data.data,\n          monsterHP: data.data.hp,\n          monsterAT: data.data.at\n        });\n      }).catch(function (error) {\n        console.log(error);\n      }); //timer\n\n      this.timerID = setInterval(function () {\n        return _this3.tick();\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        URL: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this4 = this;\n\n      event.preventDefault();\n      this.setState({\n        appstate: \"combat\"\n      }); //get quizlet from user\n\n      axios.get('http://localhost:5000/quizlet?url=' + this.state.URL).then(function (data) {\n        _this4.setState({\n          quizletSet: data.data\n        });\n\n        console.log(data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    } //Event\n\n  }, {\n    key: \"loadEvent\",\n    value: function loadEvent(ind) {\n      if (this.state.event.Options[ind].Event) {\n        if (this.state.event.Options[ind].Reference === \"random\") {\n          this.state.event = events[Math.floor(Math.random() * (events.length - 1))];\n        } else {\n          this.state.event = this.state.event.Options[ind].Reference;\n        }\n      } else {\n        if (this.state.event.Options[ind].Reference === \"random\") {\n          this.switchToCombat();\n        }\n      }\n    }\n  }, {\n    key: \"switchToCombat\",\n    value: function switchToCombat() {\n      this.generateMonster();\n      this.generateQuestion();\n      this.setState({\n        appstate: \"combat\",\n        remainingTime: 6.0\n      });\n    }\n  }, {\n    key: \"switchToEvent\",\n    value: function switchToEvent() {\n      this.setState({\n        appstate: \"event\"\n      });\n    } //COMBAT\n\n  }, {\n    key: \"damageEnemy\",\n    value: function damageEnemy() {\n      //correct answer\n      this.setState({\n        monsterHP: this.state.monsterHP - 5,\n        remainingTime: 6.0,\n        taunt: this.state.monster.hurts[Math.floor(Math.random() * (this.state.monster.hurts.length - 1))]\n      }, function () {\n        if (this.state.monsterHP <= 0) {\n          console.log(\"new monster\");\n          this.generateMonster();\n        }\n      });\n    }\n  }, {\n    key: \"damagePlayer\",\n    value: function damagePlayer() {\n      //correct answer\n      this.setState({\n        playerHP: this.state.playerHP - 5,\n        remainingTime: 6.0,\n        taunt: this.state.monster.taunts[Math.floor(Math.random() * (this.state.monster.taunts.length - 1))]\n      }, function () {\n        if (this.state.playerHP <= 0) {\n          this.setState({\n            appstate: \"dead\"\n          });\n        }\n      });\n    }\n  }, {\n    key: \"clickOne\",\n    value: function clickOne() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[0]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickTwo\",\n    value: function clickTwo() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[1]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickThree\",\n    value: function clickThree() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[2]) {\n        console.log(\"damage player\");\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickFour\",\n    value: function clickFour() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[3]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var output = null;\n\n      if (this.state.appstate == \"intro\") {\n        output = React.createElement(\"div\", {\n          className: \"form-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, \"Enter the Quizlet URL :\"), React.createElement(\"div\", {\n          className: \"input\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          value: this.state.URL,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          className: \"btn btn-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300\n          },\n          __self: this\n        }, \"Submit\")));\n      } else if (this.state.appstate == \"combat\") {\n        output = React.createElement(\"div\", {\n          className: \"combat-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"image\",\n          src: monster1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"monster-stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311\n          },\n          __self: this\n        }, this.state.monster.name), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        }, \"Enemy HP: \", React.createElement(Clock, {\n          time: this.state.monsterHP,\n          max: this.state.monster.hp,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          },\n          __self: this\n        }, \"Your HP: \", React.createElement(Clock, {\n          time: this.state.playerHP,\n          max: 50,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          },\n          __self: this\n        }, \"Enemy Attack: \", this.state.monsterAT), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"flavortext\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, this.state.taunt), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"question-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          },\n          __self: this\n        }, \"What is \" + this.state.quizletSet[this.state.questionObject.correctIndex].term + \"?\"), React.createElement(Clock, {\n          time: this.state.remainingTime,\n          max: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }), React.createElement(Controls, {\n          qObject: this.state.questionObject,\n          clicks: [this.clickOne, this.clickTwo, this.clickThree, this.clickFour],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        })));\n      } else if (this.state.appstate == \"event\") {\n        output = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 333\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"image\",\n          src: background,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"event-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336\n          },\n          __self: this\n        }, this.state.event.Title), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337\n          },\n          __self: this\n        }, this.state.event.Description), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"question-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        }, React.createElement(EventControls, {\n          options: this.state.event.Options,\n          lEvent: this.loadEvent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344\n          },\n          __self: this\n        })));\n      } else if (this.state.appstate == \"dead\") {\n        output = React.createElement(\"div\", {\n          className: \"question-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354\n          },\n          __self: this\n        }, \"You died!\"), React.createElement(\"a\", {\n          href: \"http://localhost:3000/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355\n          },\n          __self: this\n        }, \"Try again\")));\n      }\n\n      return output;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js"],"names":["React","Component","axios","Controls","EventControls","Clock","events","require","default","monster1","background","startEvent","Title","Description","Options","Reference","Event","App","props","state","appstate","playerHP","monster","taunts","taunt","URL","quizletSet","monsterHP","monsterAT","questionObject","correctIndex","buttons","remainingTime","event","handleChange","bind","handleSubmit","generateQuestion","shuffleArray","generateMonster","clickOne","clickTwo","clickThree","clickFour","damageEnemy","damagePlayer","loadEvent","array","i","length","j","Math","floor","random","temp","get","then","data","setState","hp","at","catch","error","console","log","index","answer","definition","wronganswer1","wronganswer2","wronganswer3","answers","timerID","setInterval","tick","clearInterval","target","value","preventDefault","ind","switchToCombat","hurts","output","name","term"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport EventControls from \"./EventControls.js\";\nimport Clock from \"./clock.js\";\n\nvar events =  require(\"./events.js\").default;\n\nvar monster1 = require(\"./images/monster1.png\");\nvar background = require(\"./images/background.png\");\n\nvar startEvent = {Title:\"You wake up in a dark room.\",\n       Description:\"The dim candles on the walls illuminate 3 doors in front of you. Which do you take?\",\n       Options: [{Title:\"Door 1\",\n                  Reference:\"random\",\n                  Event:true\n                },\n                {Title:\"Door 2\",\n                           Reference:\"random\",\n                           Event:true\n                         },\n                         {Title:\"Door 3\",\n                                    Reference:\"random\",\n                                    Event:true\n                                  }]\n        }\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appstate: \"event\",\n      playerHP:50,\n      monster: {taunts:[]},\n      taunt:\"\",\n      URL: 'https://quizlet.com/296829048/repaso-del-subjuntivo-2-crs-palabras-indefinidas-csi-flash-cards/',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\",\"s\",\"s\",\"s\"]\n      },\n\n      //timer\n      remainingTime: 6.0,\n\n      //event\n      event:startEvent\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.generateQuestion = this.generateQuestion.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.generateMonster= this.generateMonster.bind(this);\n\n    this.clickOne= this.clickOne.bind(this);\n    this.clickTwo= this.clickTwo.bind(this);\n    this.clickThree= this.clickThree.bind(this);\n    this.clickFour= this.clickFour.bind(this);\n    this.damageEnemy = this.damageEnemy.bind(this);\n    this.damagePlayer = this.damagePlayer.bind(this);\n    this.loadEvent = this.loadEvent.bind(this);\n  }\n  shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n  generateMonster(){\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data,\n      monsterHP: data.data.hp,\n      monsterAT: data.data.at,});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n  generateQuestion()\n  {\n    var index = Math.floor(Math.random() * (this.state.quizletSet.length-1));\n    let answer = this.state.quizletSet[index].definition;\n    let wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    var answers = [answer,wronganswer1,wronganswer2,wronganswer3];\n    this.shuffleArray(answers);\n    this.setState({\n      questionObject: {\n        correctIndex: index,\n        buttons: answers\n      }\n      })\n  }\n\n  tick() {\n    if(this.state.remainingTime>0.1)\n    {\n      this.setState({\n        remainingTime: this.state.remainingTime - 0.1\n      });\n    }\n    else{\n      this.damagePlayer();\n    }\n\n  }\n\n  componentDidMount() {\n    //your write request axios.write(blah blah blah)\n    //have it log to console, then check dev tools to see if it worked\n    //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n    this.generateQuestion();\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data,\n                    monsterHP: data.data.hp,\n                    monsterAT: data.data.at});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n\n    //timer\n    this.timerID = setInterval(\n      () => this.tick(),\n      100\n    );\n  }\n\n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n\n\n  handleChange(event) {\n    this.setState({ URL: event.target.value });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ appstate: \"combat\" })\n    //get quizlet from user\n    axios.get('http://localhost:5000/quizlet?url='+this.state.URL)\n    .then(data => {\n      this.setState({quizletSet: data.data,});\n      console.log(data);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n\n  //Event\n  loadEvent(ind){\n    if(this.state.event.Options[ind].Event)\n    {\n      if(this.state.event.Options[ind].Reference === \"random\")\n      {\n        this.state.event = events[Math.floor(Math.random() * (events.length - 1))];\n      }\n      else{\n        this.state.event = this.state.event.Options[ind].Reference;\n      }\n    }\n    else {\n      if(this.state.event.Options[ind].Reference === \"random\")\n      {\n        this.switchToCombat();\n      }\n    }\n  }\n\n  switchToCombat()\n  {\n    this.generateMonster();\n    this.generateQuestion();\n    this.setState({\n      appstate:\"combat\",\n      remainingTime:6.0\n    });\n  }\n\n  switchToEvent()\n  {\n    this.setState({\n      appstate:\"event\"\n    });\n  }\n\n  //COMBAT\n  damageEnemy(){\n    //correct answer\n    this.setState({\n      monsterHP: this.state.monsterHP - 5,\n      remainingTime:6.0,\n      taunt:this.state.monster.hurts[Math.floor(Math.random() * (this.state.monster.hurts.length - 1))]\n\n    }, function() {\n      if(this.state.monsterHP <= 0)\n      {\n        console.log(\"new monster\");\n        this.generateMonster();\n      }\n    });\n\n  }\n\n  damagePlayer(){\n    //correct answer\n    this.setState({\n      playerHP: this.state.playerHP - 5,\n      remainingTime:6.0,\n      taunt:this.state.monster.taunts[Math.floor(Math.random() * (this.state.monster.taunts.length - 1))]\n    }, function() {\n      if(this.state.playerHP <= 0)\n      {\n        this.setState(\n          {\n            appstate: \"dead\"\n          }\n        )\n      }\n    });\n\n  }\n\n  clickOne(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[0])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n\n  }\n  clickTwo(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[1])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  clickThree(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[2])\n    {\n      console.log(\"damage player\");\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  clickFour(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[3])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  render() {\n    var output = null;\n    if(this.state.appstate == \"intro\")\n    {\n      output = (\n            <div className=\"form-container\">\n              <label>\n                Enter the Quizlet URL :\n              </label>\n              <div className=\"input\">\n                <input type=\"text\" value={this.state.URL} onChange={this.handleChange} />\n              </div>\n              <div className=\"button\">\n                <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-primary\">Submit</button>\n              </div>\n            </div>\n      )\n    }\n    else if(this.state.appstate == \"combat\")\n    {\n      output = (\n        <div className=\"combat-container\">\n            <div><img className='image' src={monster1} /></div>\n            <div className=\"monster-stats\">\n              <div className='stats'>{this.state.monster.name}</div>\n              <div className='stats'>Enemy HP: <Clock time = {this.state.monsterHP} max = {this.state.monster.hp}/></div>\n              <div className='stats'>Your HP: <Clock time = {this.state.playerHP} max = {50}/></div>\n              <div className='stats'>Enemy Attack: {this.state.monsterAT}</div>\n              <br></br>\n              <div className='flavortext'>{this.state.taunt}</div>\n              <br></br>\n\n        </div>\n\n          <div className=\"question-container\">\n          <div>{\"What is \"+this.state.quizletSet[this.state.questionObject.correctIndex].term+\"?\"}</div>\n          <Clock time = {this.state.remainingTime} max = {6}/>\n            <Controls qObject = {this.state.questionObject}\n                      clicks = {[this.clickOne,this.clickTwo,this.clickThree,this.clickFour]}/>\n          </div>\n        </div>)\n\n    }\n    else if(this.state.appstate == \"event\")\n    {\n      output = (\n        <div>\n            <div><img className='image' src={background} /></div>\n            <div className=\"event-container\">\n              <h2 >{this.state.event.Title}</h2>\n              <div >{this.state.event.Description}</div>\n              <br></br>\n              <br></br>\n\n        </div>\n\n          <div className=\"question-container\">\n            <EventControls options = {this.state.event.Options}\n                          lEvent = {this.loadEvent}/>\n          </div>\n        </div>)\n\n    }\n    else if(this.state.appstate == \"dead\")\n    {output = (\n      <div className=\"question-container\">\n      <br></br>\n      <div className = \"stats\">You died!</div>\n      <a href=\"http://localhost:3000/\"><button>Try again</button></a>\n      </div>\n    )\n    }\n    return output;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
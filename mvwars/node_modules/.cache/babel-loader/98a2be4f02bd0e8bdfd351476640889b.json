{"ast":null,"code":"import _classCallCheck from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport Clock from \"./clock.js\";\n\nvar monster1 = require(\"./images/monster1.png\");\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      intro: true,\n      playerHP: 50,\n      monster: {},\n      URL: '',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\", \"s\", \"s\", \"s\"]\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateQuestion = _this.generateQuestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shuffleArray = _this.shuffleArray.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateMonster = _this.generateMonster.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickOne = _this.clickOne.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickTwo = _this.clickTwo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickThree = _this.clickThree.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickFour = _this.clickFour.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damageEnemy = _this.damageEnemy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damagePlayer = _this.damagePlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }, {\n    key: \"generateMonster\",\n    value: function generateMonster() {\n      var _this2 = this;\n\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this2.setState({\n          monster: data.data,\n          monsterHP: data.data.hp,\n          monsterAT: data.data.at\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"generateQuestion\",\n    value: function generateQuestion() {\n      var index = Math.floor(Math.random() * (this.state.quizletSet.length - 1));\n      var answer = this.state.quizletSet[index].definition;\n      var wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var answers = [answer, wronganswer1, wronganswer2, wronganswer3];\n      this.shuffleArray(answers);\n      this.setState({\n        questionObject: {\n          correctIndex: index,\n          buttons: answers\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      //your write request axios.write(blah blah blah)\n      //have it log to console, then check dev tools to see if it worked\n      //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n      this.generateQuestion();\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this3.setState({\n          monster: data.data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      }); //axios get request for quizlet set, set quizletSet to what backend returns\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        URL: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this4 = this;\n\n      event.preventDefault();\n      this.setState({\n        intro: false\n      }); //get quizlet from user\n\n      axios.get('http://localhost:5000/quizlet?url=' + this.state.URL).then(function (data) {\n        _this4.setState({\n          quizletSet: data.data\n        });\n\n        console.log(data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"damageEnemy\",\n    value: function damageEnemy() {\n      //correct answer\n      this.setState({\n        monsterHP: this.state.monsterHP - 5\n      }, function () {\n        console.log(this.state.monsterHP);\n\n        if (this.state.monsterHP <= 0) {\n          console.log(\"new monster\");\n          this.generateMonster();\n        }\n      });\n    }\n  }, {\n    key: \"damagePlayer\",\n    value: function damagePlayer() {\n      //correct answer\n      this.setState({\n        playerHP: this.state.playerHP - 5\n      }, function () {\n        if (this.player.monsterHP <= 0) {\n          console.log(\"player dead\");\n        }\n      });\n    }\n  }, {\n    key: \"clickOne\",\n    value: function clickOne() {\n      if (!this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[0]) {\n        this.damagePlayer(); //wrong answer\n      } else {\n        //correct answer\n        this.damageEnemy();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickTwo\",\n    value: function clickTwo() {\n      if (!this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[1]) {\n        this.damagePlayer(); //wrong answer\n      } else {\n        //correct answer\n        this.damageEnemy();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickThree\",\n    value: function clickThree() {\n      if (!this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[2]) {\n        this.setState({\n          playerHP: this.state.playerHP - 5\n        }); //wrong answer\n      } else {\n        //correct answer\n        this.damageEnemy();\n      }\n\n      if (this.state.monsterHP < 1) {\n        console.log(\"new monster\");\n        this.generateMonster();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickFour\",\n    value: function clickFour() {\n      if (!this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[3]) {\n        this.setState({\n          playerHP: this.state.playerHP - 5\n        }); //wrong answer\n      } else {\n        //correct answer\n        this.damageEnemy();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"app-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, this.state.intro ? React.createElement(\"div\", {\n        className: \"form-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Enter the Quizlet URL :\"), React.createElement(\"div\", {\n        className: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.URL,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        className: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Submit\"))) : React.createElement(\"div\", {\n        className: \"combat-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"monster-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"image\",\n        src: monster1,\n        height: \"300\",\n        width: \"300\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"monster-stats\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.state.monster.name), React.createElement(\"div\", {\n        className: \"hp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Enemy HP: \", this.state.monsterHP, \" || Your HP: \", this.state.playerHP), React.createElement(\"div\", {\n        className: \"monster-at\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Enemy Attack: \", this.state.monsterAT)), React.createElement(\"div\", {\n        className: \"flavor-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"question-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"What is \" + this.state.quizletSet[this.state.questionObject.correctIndex].term + \"?\", React.createElement(Clock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(Controls, {\n        qObject: this.state.questionObject,\n        clicks: [this.clickOne, this.clickTwo, this.clickThree, this.clickFour],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js"],"names":["React","Component","axios","Controls","Clock","monster1","require","App","props","state","intro","playerHP","monster","URL","quizletSet","default","monsterHP","monsterAT","questionObject","correctIndex","buttons","handleChange","bind","handleSubmit","generateQuestion","shuffleArray","generateMonster","clickOne","clickTwo","clickThree","clickFour","damageEnemy","damagePlayer","array","i","length","j","Math","floor","random","temp","get","then","data","setState","hp","at","catch","error","console","log","index","answer","definition","wronganswer1","wronganswer2","wronganswer3","answers","event","target","value","preventDefault","player","name","term"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport Clock from \"./clock.js\";\n\nvar monster1 = require(\"./images/monster1.png\");\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      intro: true,\n      playerHP:50,\n      monster: {},\n      URL: '',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\",\"s\",\"s\",\"s\"]\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.generateQuestion = this.generateQuestion.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.generateMonster= this.generateMonster.bind(this);\n\n    this.clickOne= this.clickOne.bind(this);\n    this.clickTwo= this.clickTwo.bind(this);\n    this.clickThree= this.clickThree.bind(this);\n    this.clickFour= this.clickFour.bind(this);\n    this.damageEnemy = this.damageEnemy.bind(this);\n    this.damagePlayer = this.damagePlayer.bind(this);\n  }\n  shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n  generateMonster(){\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data,\n      monsterHP: data.data.hp,\n      monsterAT: data.data.at,});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n  generateQuestion()\n  {\n    var index = Math.floor(Math.random() * (this.state.quizletSet.length-1));\n    let answer = this.state.quizletSet[index].definition;\n    let wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    var answers = [answer,wronganswer1,wronganswer2,wronganswer3];\n    this.shuffleArray(answers);\n    this.setState({\n      questionObject: {\n        correctIndex: index,\n        buttons: answers\n      }\n      })\n  }\n  componentDidMount() {\n    //your write request axios.write(blah blah blah)\n    //have it log to console, then check dev tools to see if it worked\n    //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n    this.generateQuestion();\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n    //axios get request for quizlet set, set quizletSet to what backend returns\n\n  }\n  handleChange(event) {\n    this.setState({ URL: event.target.value });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ intro: false })\n    //get quizlet from user\n    axios.get('http://localhost:5000/quizlet?url='+this.state.URL)\n    .then(data => {\n      this.setState({quizletSet: data.data,});\n      console.log(data);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n  damageEnemy(){\n    //correct answer\n    this.setState({\n      monsterHP: this.state.monsterHP - 5\n    }, function() {\n      console.log(this.state.monsterHP);\n      if(this.state.monsterHP <= 0)\n      {\n        console.log(\"new monster\");\n        this.generateMonster();\n      }\n    });\n\n  }\n\n  damagePlayer(){\n    //correct answer\n    this.setState({\n      playerHP: this.state.playerHP - 5\n    }, function() {\n      if(this.player.monsterHP <= 0)\n      {\n        console.log(\"player dead\");\n      }\n    });\n\n  }\n\n  clickOne(){\n    if(!this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[0])\n    {\n      this.damagePlayer();\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damageEnemy();\n    }\n    this.generateQuestion();\n\n  }\n  clickTwo(){\n    if(!this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[1])\n    {\n      this.damagePlayer();\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damageEnemy();\n    }\n    this.generateQuestion();\n  }\n  clickThree(){\n    if(!this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[2])\n    {\n      this.setState({\n        playerHP: this.state.playerHP - 5\n      })\n      //wrong answer\n\n    }\n    else {\n      //correct answer\n      this.damageEnemy();\n    }\n\n\n    if(this.state.monsterHP < 1)\n    {\n      console.log(\"new monster\");\n      this.generateMonster();\n    }\n    this.generateQuestion();\n  }\n  clickFour(){\n    if(!this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[3])\n    {\n      this.setState({\n        playerHP: this.state.playerHP - 5\n      })\n      //wrong answer\n\n    }\n    else {\n      //correct answer\n      this.damageEnemy();\n\n    }\n\n    this.generateQuestion();\n  }\n  render() {\n    return (\n      <div className=\"app-container\">\n        {this.state.intro ?\n          <div className=\"form-container\">\n            <label>\n              Enter the Quizlet URL :\n            </label>\n            <div className=\"input\">\n              <input type=\"text\" value={this.state.URL} onChange={this.handleChange} />\n            </div>\n            <div className=\"button\">\n              <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-primary\">Submit</button>\n            </div>\n          </div>\n          :\n          <div className=\"combat-container\">\n            <div className=\"monster-container\">\n              <div><img className='image' src={monster1} height=\"300\" width=\"300\" /></div>\n              <div className=\"monster-stats\">\n                <div className='name'>{this.state.monster.name}</div>\n                <div className='hp'>Enemy HP: {this.state.monsterHP} || Your HP: {this.state.playerHP}</div>\n                <div className='monster-at'>Enemy Attack: {this.state.monsterAT}</div>\n\n              </div>\n              <div className='flavor-text'>{}</div>\n            </div>\n            <div className=\"question-container\">\n            {\"What is \"+this.state.quizletSet[this.state.questionObject.correctIndex].term+\"?\"}\n            <Clock />\n              <Controls qObject = {this.state.questionObject}\n                        clicks = {[this.clickOne,this.clickTwo,this.clickThree,this.clickFour]}/>\n            </div>\n          </div>}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nichw/Documents/quizlet-rpg/mvwars/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport Clock from \"./clock.js\";\n\nvar monster1 = require(\"./images/monster1.png\");\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      appstate: \"combat\",\n      playerHP: 50,\n      monster: {\n        taunts: []\n      },\n      taunt: \"\",\n      URL: 'https://quizlet.com/296829048/repaso-del-subjuntivo-2-crs-palabras-indefinidas-csi-flash-cards/',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\", \"s\", \"s\", \"s\"]\n      },\n      //timer\n      remainingTime: 5.0\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateQuestion = _this.generateQuestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shuffleArray = _this.shuffleArray.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateMonster = _this.generateMonster.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickOne = _this.clickOne.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickTwo = _this.clickTwo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickThree = _this.clickThree.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clickFour = _this.clickFour.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damageEnemy = _this.damageEnemy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.damagePlayer = _this.damagePlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }, {\n    key: \"generateMonster\",\n    value: function generateMonster() {\n      var _this2 = this;\n\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this2.setState({\n          monster: data.data,\n          monsterHP: data.data.hp,\n          monsterAT: data.data.at\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"generateQuestion\",\n    value: function generateQuestion() {\n      var index = Math.floor(Math.random() * (this.state.quizletSet.length - 1));\n      var answer = this.state.quizletSet[index].definition;\n      var wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length - 1))].definition;\n      var answers = [answer, wronganswer1, wronganswer2, wronganswer3];\n      this.shuffleArray(answers);\n      this.setState({\n        questionObject: {\n          correctIndex: index,\n          buttons: answers\n        }\n      });\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      if (this.state.remainingTime > 0.1) {\n        this.setState({\n          remainingTime: this.state.remainingTime - 0.1\n        });\n      } else {\n        this.damagePlayer();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      //your write request axios.write(blah blah blah)\n      //have it log to console, then check dev tools to see if it worked\n      //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n      this.generateQuestion();\n      axios.get('http://localhost:5000/monsters').then(function (data) {\n        _this3.setState({\n          monster: data.data,\n          monsterHP: data.data.hp,\n          monsterAT: data.data.at\n        });\n      }).catch(function (error) {\n        console.log(error);\n      }); //timer\n\n      this.timerID = setInterval(function () {\n        return _this3.tick();\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        URL: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this4 = this;\n\n      event.preventDefault();\n      this.setState({\n        appstate: \"combat\"\n      }); //get quizlet from user\n\n      axios.get('http://localhost:5000/quizlet?url=' + this.state.URL).then(function (data) {\n        _this4.setState({\n          quizletSet: data.data\n        });\n\n        console.log(data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"damageEnemy\",\n    value: function damageEnemy() {\n      //correct answer\n      this.setState({\n        monsterHP: this.state.monsterHP - 5,\n        remainingTime: 5.0,\n        taunt: \"\\\"\" + this.state.monster.hurts[Math.floor(Math.random() * (this.state.monster.hurts.length - 1))] + \"\\\"\"\n      }, function () {\n        if (this.state.monsterHP <= 0) {\n          console.log(\"new monster\");\n          this.generateMonster();\n        }\n      });\n    }\n  }, {\n    key: \"damagePlayer\",\n    value: function damagePlayer() {\n      //correct answer\n      this.setState({\n        playerHP: this.state.playerHP - 5,\n        remainingTime: 5.0,\n        taunt: \"\\\"\" + this.state.monster.taunts[Math.floor(Math.random() * (this.state.monster.taunts.length - 1))] + \"\\\"\"\n      }, function () {\n        if (this.state.playerHP <= 0) {\n          console.log(\"player dead\");\n        }\n      });\n    }\n  }, {\n    key: \"clickOne\",\n    value: function clickOne() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[0]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickTwo\",\n    value: function clickTwo() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[1]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickThree\",\n    value: function clickThree() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[2]) {\n        console.log(\"damage player\");\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"clickFour\",\n    value: function clickFour() {\n      if (this.state.quizletSet[this.state.questionObject.correctIndex].definition == this.state.questionObject.buttons[3]) {\n        this.damageEnemy(); //wrong answer\n      } else {\n        //correct answer\n        this.damagePlayer();\n      }\n\n      this.generateQuestion();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var output = null;\n\n      if (this.state.appstate == \"intro\") {\n        output = React.createElement(\"div\", {\n          className: \"form-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, \"Enter the Quizlet URL :\"), React.createElement(\"div\", {\n          className: \"input\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          value: this.state.URL,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          className: \"btn btn-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, \"Submit\")));\n      } else if (this.state.appstate == \"combat\") {\n        output = React.createElement(\"div\", {\n          className: \"combat-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"image\",\n          src: monster1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"monster-stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, this.state.monster.name), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, \"Enemy HP: \", this.state.monsterHP, \" || Your HP: \", this.state.playerHP), React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, \"Enemy Attack: \", this.state.monsterAT), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"flavortext\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, this.state.taunt), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"question-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, \"What is \" + this.state.quizletSet[this.state.questionObject.correctIndex].term + \"?\"), React.createElement(Clock, {\n          time: this.state.remainingTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }), React.createElement(Controls, {\n          qObject: this.state.questionObject,\n          clicks: [this.clickOne, this.clickTwo, this.clickThree, this.clickFour],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        })));\n      } else if (this.state.appstate == \"dead\") {\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"stats\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"You died\"), React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }));\n      }\n\n      return output;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/nichw/Documents/quizlet-rpg/mvwars/src/App.js"],"names":["React","Component","axios","Controls","Clock","monster1","require","App","props","state","appstate","playerHP","monster","taunts","taunt","URL","quizletSet","default","monsterHP","monsterAT","questionObject","correctIndex","buttons","remainingTime","handleChange","bind","handleSubmit","generateQuestion","shuffleArray","generateMonster","clickOne","clickTwo","clickThree","clickFour","damageEnemy","damagePlayer","array","i","length","j","Math","floor","random","temp","get","then","data","setState","hp","at","catch","error","console","log","index","answer","definition","wronganswer1","wronganswer2","wronganswer3","answers","timerID","setInterval","tick","clearInterval","event","target","value","preventDefault","hurts","output","name","term"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport './style.css';\nimport Controls from \"./Controls.js\";\nimport Clock from \"./clock.js\";\n\nvar monster1 = require(\"./images/monster1.png\");\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      appstate: \"combat\",\n      playerHP:50,\n      monster: {taunts:[]},\n      taunt:\"\",\n      URL: 'https://quizlet.com/296829048/repaso-del-subjuntivo-2-crs-palabras-indefinidas-csi-flash-cards/',\n      quizletSet: require(\"./dummyQuizlet\").default,\n      monsterHP: 20,\n      monsterAT: 20,\n      questionObject: {\n        correctIndex: 0,\n        buttons: [\"s\",\"s\",\"s\",\"s\"]\n      },\n\n      //timer\n      remainingTime: 5.0\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.generateQuestion = this.generateQuestion.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.generateMonster= this.generateMonster.bind(this);\n\n    this.clickOne= this.clickOne.bind(this);\n    this.clickTwo= this.clickTwo.bind(this);\n    this.clickThree= this.clickThree.bind(this);\n    this.clickFour= this.clickFour.bind(this);\n    this.damageEnemy = this.damageEnemy.bind(this);\n    this.damagePlayer = this.damagePlayer.bind(this);\n  }\n  shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n  generateMonster(){\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data,\n      monsterHP: data.data.hp,\n      monsterAT: data.data.at,});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n  generateQuestion()\n  {\n    var index = Math.floor(Math.random() * (this.state.quizletSet.length-1));\n    let answer = this.state.quizletSet[index].definition;\n    let wronganswer1 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer2 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    let wronganswer3 = this.state.quizletSet[Math.floor(Math.random() * (this.state.quizletSet.length-1))].definition;\n    var answers = [answer,wronganswer1,wronganswer2,wronganswer3];\n    this.shuffleArray(answers);\n    this.setState({\n      questionObject: {\n        correctIndex: index,\n        buttons: answers\n      }\n      })\n  }\n\n  tick() {\n    if(this.state.remainingTime>0.1)\n    {\n      this.setState({\n        remainingTime: this.state.remainingTime - 0.1\n      });\n    }\n    else{\n      this.damagePlayer();\n    }\n\n  }\n\n  componentDidMount() {\n    //your write request axios.write(blah blah blah)\n    //have it log to console, then check dev tools to see if it worked\n    //nothing will show up in UI, this is just for you to test server, don't commit to main branch\n    this.generateQuestion();\n    axios.get('http://localhost:5000/monsters')\n    .then(data => {\n      this.setState({monster: data.data,\n                    monsterHP: data.data.hp,\n                    monsterAT: data.data.at});\n    })\n    .catch(error => {\n      console.log(error);\n    });\n\n    //timer\n    this.timerID = setInterval(\n      () => this.tick(),\n      100\n    );\n  }\n\n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n\n\n  handleChange(event) {\n    this.setState({ URL: event.target.value });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ appstate: \"combat\" })\n    //get quizlet from user\n    axios.get('http://localhost:5000/quizlet?url='+this.state.URL)\n    .then(data => {\n      this.setState({quizletSet: data.data,});\n      console.log(data);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n  damageEnemy(){\n    //correct answer\n    this.setState({\n      monsterHP: this.state.monsterHP - 5,\n      remainingTime:5.0,\n      taunt: \"\\\"\"+this.state.monster.hurts[Math.floor(Math.random() * (this.state.monster.hurts.length - 1))]+\"\\\"\"\n\n    }, function() {\n      if(this.state.monsterHP <= 0)\n      {\n        console.log(\"new monster\");\n        this.generateMonster();\n      }\n    });\n\n  }\n\n  damagePlayer(){\n    //correct answer\n    this.setState({\n      playerHP: this.state.playerHP - 5,\n      remainingTime:5.0,\n      taunt: \"\\\"\"+this.state.monster.taunts[Math.floor(Math.random() * (this.state.monster.taunts.length - 1))]+\"\\\"\"\n    }, function() {\n      if(this.state.playerHP <= 0)\n      {\n        console.log(\"player dead\");\n      }\n    });\n\n  }\n\n  clickOne(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[0])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n\n  }\n  clickTwo(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[1])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  clickThree(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[2])\n    {\n      console.log(\"damage player\");\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  clickFour(){\n    if(this.state.quizletSet[this.state.questionObject.correctIndex].definition==this.state.questionObject.buttons[3])\n    {\n      this.damageEnemy();\n\n      //wrong answer\n    }\n    else {\n      //correct answer\n      this.damagePlayer();\n    }\n    this.generateQuestion();\n  }\n  render() {\n    var output = null;\n    if(this.state.appstate == \"intro\")\n    {\n      output = (\n            <div className=\"form-container\">\n              <label>\n                Enter the Quizlet URL :\n              </label>\n              <div className=\"input\">\n                <input type=\"text\" value={this.state.URL} onChange={this.handleChange} />\n              </div>\n              <div className=\"button\">\n                <button type=\"submit\" onClick={this.handleSubmit} className=\"btn btn-primary\">Submit</button>\n              </div>\n            </div>\n      )\n    }\n    else if(this.state.appstate == \"combat\")\n    {\n      output = (\n        <div className=\"combat-container\">\n            <div><img className='image' src={monster1} /></div>\n            <div className=\"monster-stats\">\n              <div className='stats'>{this.state.monster.name}</div>\n              <div className='stats'>Enemy HP: {this.state.monsterHP} || Your HP: {this.state.playerHP}</div>\n              <div className='stats'>Enemy Attack: {this.state.monsterAT}</div>\n              <br></br>\n              <div className='flavortext'>{this.state.taunt}</div>\n              <br></br>\n\n        </div>\n\n          <div className=\"question-container\">\n          <div>{\"What is \"+this.state.quizletSet[this.state.questionObject.correctIndex].term+\"?\"}</div>\n          <Clock time = {this.state.remainingTime}/>\n            <Controls qObject = {this.state.questionObject}\n                      clicks = {[this.clickOne,this.clickTwo,this.clickThree,this.clickFour]}/>\n          </div>\n        </div>)\n\n    }\n    else if(this.state.appstate == \"dead\")\n    {\n      <div>\n      <div className = \"stats\">You died</div>\n      <button></button>\n      </div>\n    }\n    return output;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}